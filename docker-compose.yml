version: '3.9'

volumes:
  prometheus_data: {}

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - 22181:2181

  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - 29092:29092
    environment:
        KAFKA_BROKER_ID: 1
        KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
        KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
        KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
        KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
        KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1

  kafka-ui:
    image: provectuslabs/kafka-ui
    container_name: kafka-ui
    ports:
      - 11080:8080
    restart: always
    environment:
      - KAFKA_CLUSTERS_0_NAME=local
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:9092
      - KAFKA_CLUSTERS_0_ZOOKEEPER=zookeeper:2181
    links:
      - kafka
      - zookeeper

  kafka-setup:
   image: confluentinc/cp-kafka:latest
   container_name: kafka-setup
   depends_on:
     - kafka
   entrypoint: [ '/bin/sh', '-c' ]
   command:
    - "kafka-topics --bootstrap-server kafka:9092 --create --if-not-exists --topic goods_topic --replication-factor 1 --partitions 3"

  postgres:
    image: postgres:16.2
    environment:
      POSTGRES_DB: "cscbase"
      POSTGRES_USER: "cscuser"
      POSTGRES_PASSWORD: "cscpass"
    ports:
      - "5433:5432"

  node-exporter:
    image: prom/node-exporter:latest
    container_name: node-exporter
    restart: unless-stopped
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    expose:
      - 9100

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - 9090:9090
    command:
      - --config.file=/etc/prometheus/prometheus.yml
    volumes:
      - ./configs/prometheus.yml:/etc/prometheus/prometheus.yml:ro

  grafana:
    image: grafana/grafana
    user: root
    depends_on:
      - prometheus
    ports:
      - 3000:3000
    volumes:
      - ./grafana:/var/lib/grafana
      - ./grafana/provisioning/:/etc/grafana/provisioning/
    container_name: grafana
    hostname: grafana
    restart: unless-stopped
    environment:
      TZ: "Europe/Moscow"
    networks:
      - default

  application1:
    build:
      context: ..
      dockerfile: ./mts_grafana_sample/application/Dockerfile
    container_name: application1
    env_file:
      - ./application/application.env
    ports:
      - "8095:8080"
    depends_on:
      - postgres

  application2:
    build:
      context: ..
      dockerfile: ./mts_grafana_sample/application/Dockerfile
    container_name: application2
    env_file:
      - ./application/application.env
    ports:
      - "8096:8080"
    depends_on:
      - postgres

  application3:
    build:
      context: ..
      dockerfile: ./mts_grafana_sample/application/Dockerfile
    container_name: application3
    env_file:
      - ./application/application.env
    ports:
      - "8097:8080"
    depends_on:
      - postgres

  burner:
    build:
      context: ..
      dockerfile: ./mts_grafana_sample/example/burner/Dockerfile
    container_name: burner
    env_file:
      - ./example/burner/application.env
    ports:
      - "8098:8080"
    depends_on:
      - kafka
      - postgres